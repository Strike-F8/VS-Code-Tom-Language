{
  "scopeName": "source.tom",
  "name": "Tom",
  "patterns": [
    {
      "name": "comment.line.double-slash.tom",
      "begin": "//",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.comment.tom"
        }
      },
      "end": "$",
      "patterns": [
        {
          "name": "keyword.todo.tom",
          "match": "(?i)TODO:",
          "captures": {
            "0": {
              "name": "keyword.todo.tom"
            }
          }
        }
      ]
    },
    {
      "name": "comment.block.tom",
      "begin": "/\\*",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.comment.begin.tom"
        }
      },
      "end": "\\*/",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.comment.end.tom"
        }
      },
      "patterns": [
        {
          "name": "keyword.todo.tom",
          "match": "(?i)TODO:",
          "captures": {
            "0": {
              "name": "keyword.todo.tom"
            }
          }
        }
      ]
    },
    {
      "name": "keyword.operator.assignment.tom",
      "match": "(?:=|\\+=|-=|\\*=|/=|%=|&=|\\|=|\\^=|<<=|>>=)"
    },
    {
      "name": "keyword.operator.arithmetic.tom",
      "match": "[+\\-*/%]"
    },
    {
      "name": "keyword.operator.bitwise.tom",
      "match": "[&|^~]|<<|>>"
    },
    {
      "name": "keyword.operator.comparison.tom",
      "match": "(?:==|!=|<=|>=|<|>|!)"
    },
    {
      "name": "keyword.operator.logical.tom",
      "match": "\\b(?:and|or|not|is|isnot)\\b"
    },
    {
      "name": "keyword.operator.ternary.tom",
      "match": "[?:]"
    },
    {
      "name": "punctuation.accessor.dot.tom",
      "match": "\\."
    },
    {
      "name": "string.quoted.double.tom",
      "begin": "\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.tom"
        }
      },
      "end": "\"",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.tom"
        }
      },
      "patterns": [
        {
          "name": "constant.character.escape.tom",
          "match": "\\\\([\"'\\\\ntrbfu]|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4})"
        }
      ]
    },
    {
      "name": "keyword.control.tom",
      "match": "\\b(if|else|switch|case|default|for|while|do|repeat|break|continue|return|forward)\\b"
    },
    {
      "name": "meta.class.definition.tom",
      "match": "\\b(class)\\s+((?![a-z])[\\p{L}_][\\p{L}\\p{N}_]*)",
      "captures": {
        "1": {
          "name": "storage.type.class.tom"
        },
        "2": {
          "name": "entity.name.type.class.tom"
        }
      }
    },
    {
      "name": "keyword.declaration.tom",
      "match": "\\b(class|const|static|final|abstract|new|literal|binary|native|attach|author|title|import|extends|public|private)\\b"
    },
    {
      "name": "constant.language.tom",
      "match": "\\b(null|true|false)\\b"
    },
    {
      "name": "storage.type.tom",
      "patterns": [
        { "match": "\\b(int|double|string|var|Vector|void|Scene|Object|Matrix|Plane|Path|Rect|Index|Scenario|ArrangeBar|Color)\\b", "name": "storage.type.primitive.tom" },
        { "match": "\\b[A-Z][a-zA-Z]*(Handle|Scene|Prop|Info)\\b", "name": "entity.name.type.class.tom" },
        { "match": "\\bKjs[A-Z][A-Za-z]*\\b", "name": "entity.name.type.class.tom" }
      ]
    },
    {
      "name": "constant.numeric.tom",
      "match": "\\b(0x[0-9a-fA-F]+|\\d+\\.\\d*([eE][+-]?\\d+)?|\\d+([eE][+-]?\\d+)?)\\b"
    },
    {
      "name": "variable.language.this.tom",
      "match": "\\b(this|super)\\b"
    },
    {
      "name": "support.function.builtin.tom",
      "match": "\\bsizeof(?=\\s*\\()"
    },
    {
      "name": "support.function.debug.tom",
      "match": "\\bDebugMessage(?=\\s*\\()\\b"
    },
    { "include": "#types" },
    {
      "name": "variable.other.readwrite.tom",
      "match": "\\b[a-z_][a-zA-Z0-9_]{3,10}\\b"
    },
    {
      "name": "invalid.short.tom",
      "match": "\\b[a-z_][a-zA-Z0-9_]{0,2}\\b"
    }

      ],
      "uuid": "3cfb3d55-0a17-4f5f-9610-09a8f49ef4d6"
}
